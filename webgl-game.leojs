{
  "leoHeader": {
    "fileFormat": 2
  },
  "vnodes": [
    {
      "gnx": "felix.20240930010237.1",
      "vh": "WebGL Game",
      "children": [
        {
          "gnx": "felix.20240930165615.1",
          "vh": "Constants"
        },
        {
          "gnx": "felix.20240930010401.1",
          "vh": "class Game",
          "children": [
            {
              "gnx": "felix.20240930173811.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930173750.1",
              "vh": "update"
            },
            {
              "gnx": "felix.20241003195934.1",
              "vh": "setBuffer"
            },
            {
              "gnx": "felix.20240930235939.1",
              "vh": "resize"
            }
          ]
        },
        {
          "gnx": "felix.20240930193901.1",
          "vh": "class Material",
          "children": [
            {
              "gnx": "felix.20240930193936.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930194442.1",
              "vh": "getShader"
            },
            {
              "gnx": "felix.20241003015411.1",
              "vh": "gatherParameters"
            },
            {
              "gnx": "felix.20241003021102.1",
              "vh": "setParam"
            }
          ]
        },
        {
          "gnx": "felix.20240930203821.1",
          "vh": "class Sprite",
          "children": [
            {
              "gnx": "felix.20240930204115.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930221139.1",
              "vh": "static createRectArray"
            },
            {
              "gnx": "felix.20240930204607.1",
              "vh": "setup"
            },
            {
              "gnx": "felix.20240930223207.1",
              "vh": "render"
            }
          ]
        },
        {
          "gnx": "felix.20241003154420.1",
          "vh": "class BackBuffer",
          "children": [
            {
              "gnx": "felix.20241003160652.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20241003202629.1",
              "vh": "render"
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20240930231508.1",
      "vh": "Maths",
      "children": [
        {
          "gnx": "felix.20240930231747.1",
          "vh": "class Point",
          "children": [
            {
              "gnx": "felix.20240930231816.1",
              "vh": "constructor"
            }
          ]
        },
        {
          "gnx": "felix.20240930231857.1",
          "vh": "class M3x3",
          "children": [
            {
              "gnx": "felix.20240930232333.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930232607.1",
              "vh": "multiply"
            },
            {
              "gnx": "felix.20240930232735.1",
              "vh": "translation"
            },
            {
              "gnx": "felix.20240930232836.1",
              "vh": "scale"
            },
            {
              "gnx": "felix.20240930232910.1",
              "vh": "getFloatArray"
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20240721001224.1",
      "vh": "External Files",
      "children": [
        {
          "gnx": "felix.20240930165848.1",
          "vh": "@clean src/globals.d.ts"
        },
        {
          "gnx": "felix.20240930165631.1",
          "vh": "@clean src/constants.ts",
          "children": [
            {
              "gnx": "felix.20240930165615.1"
            }
          ]
        },
        {
          "gnx": "felix.20240721001316.1",
          "vh": "@clean src/main.ts",
          "children": [
            {
              "gnx": "felix.20240930170311.1",
              "vh": "<< imports >>"
            },
            {
              "gnx": "felix.20240930143411.1",
              "vh": "Startup"
            },
            {
              "gnx": "felix.20240930010401.1"
            },
            {
              "gnx": "felix.20240930193901.1"
            },
            {
              "gnx": "felix.20240930203821.1"
            },
            {
              "gnx": "felix.20241003154420.1"
            }
          ]
        },
        {
          "gnx": "felix.20240930231528.1",
          "vh": "@clean src/maths.ts",
          "children": [
            {
              "gnx": "felix.20240930231747.1"
            },
            {
              "gnx": "felix.20240930231857.1"
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20240929225725.1",
      "vh": "@auto README.md"
    }
  ],
  "tnodes": {
    "felix.20240930010237.1": "@language typescript\n",
    "felix.20240930165615.1": "export const SCREEN_WIDTH = 800;\nexport const SCREEN_HEIGHT = 600;\nexport const SPRITE_SIZE = 32;\nexport const GAME_HEIGHT = 240;\n\nexport const vertexShaderSource = /*glsl*/ `\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n\n    uniform mat3 u_world;\n    uniform mat3 u_object;\n    uniform vec2 u_frame;\n\n    varying vec2 v_texCoord;\n    void main() {\n        gl_Position = vec4(u_world * u_object * vec3(a_position, 1), 1);\n        v_texCoord = a_texCoord + u_frame;\n    }\n`;\n\nexport const fragmentShaderSource = /*glsl*/ `\n    precision mediump float;\n    uniform sampler2D u_image;\n    uniform vec4 u_color;\n    varying vec2 v_texCoord;\n\n    void main(){\n        gl_FragColor = u_color * texture2D(u_image, v_texCoord);\n    }\n`;\n\n",
    "felix.20240930010401.1": "export class Game {\n\n    public canvasElement: HTMLCanvasElement;\n    public gl!: WebGL2RenderingContext;\n    public lightBuffer: BackBuffer;\n    public backBuffer: BackBuffer;\n    public halo: Sprite;\n    public white: Sprite;\n    public sprite1: Sprite;\n    public sprite1Pos: Point;\n    public sprite1Frame: Point;\n\n    // public sprite2: Sprite;\n    public sprite2Pos: Point;\n    public sprite2Frame: Point;\n\n    public worldSpaceMatrix: M3x3;\n\n    private _resizeTimer: ReturnType<typeof setTimeout> | undefined;\n\n    @others\n\n}\n\n",
    "felix.20240930173811.1": "constructor() {\n    console.log('Init WebGL2 Game !');\n\n    this.canvasElement = document.createElement(\"canvas\");\n    this.canvasElement.width = Constants.SCREEN_WIDTH;\n    this.canvasElement.height = Constants.SCREEN_HEIGHT;\n\n    this.worldSpaceMatrix = new M3x3();\n\n    this.gl = this.canvasElement.getContext('webgl2')!;\n    this.gl.clearColor(0.4, 0.6, 1.0, 0.0);\n\n    document.body.appendChild(this.canvasElement);\n\n    this.backBuffer = new BackBuffer(this.gl, { width: 512, height: 240 });\n    this.lightBuffer = new BackBuffer(this.gl, { width: 512, height: 240 });\n\n    this.halo = new Sprite(this.gl, \"images/halo.png\", Constants.vertexShaderSource,\n        Constants.fragmentShaderSource, {\n        width: 256,\n        height: 256,\n    });\n    this.white = new Sprite(this.gl, \"images/white.png\", Constants.vertexShaderSource,\n        Constants.fragmentShaderSource, {\n        width: 1,\n        height: 1,\n    });\n\n    this.sprite1 = new Sprite(\n        this.gl,\n        \"images/alien.png\",\n        Constants.vertexShaderSource,\n        Constants.fragmentShaderSource,\n        {\n            width: 64,\n            height: 64,\n        }\n    );\n    this.sprite1Pos = new Point();\n    this.sprite1Frame = new Point();\n\n    this.sprite2Pos = new Point();\n    this.sprite2Frame = new Point();\n\n    // this.sprite2 = new Sprite(this.gl, \"images/sprite.png\", Constants.vertexShaderSource, Constants.fragmentShaderSource);\n}\n\n",
    "felix.20240930173750.1": "public update(): void {\n    this.gl.viewport(0, 0, this.canvasElement.width, this.canvasElement.height);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    this.gl.enable(this.gl.BLEND);\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n    this.sprite1Frame.x = (new Date().getTime() * 0.006) % 3;\n    this.sprite1Frame.y = (new Date().getTime() * 0.002) % 2;\n    this.sprite1Pos.x = (this.sprite1Pos.x + 1.1) % 256;\n\n    this.sprite2Frame.x = (new Date().getTime() * 0.006) % 3;\n    this.sprite2Frame.y = (new Date().getTime() * 0.002) % 2;\n\n    this.setBuffer(this.backBuffer);\n    this.sprite1.render(this.sprite1Pos, this.sprite1Frame);\n    this.sprite1.render(this.sprite2Pos, this.sprite2Frame);\n\n\n    this.setBuffer(this.lightBuffer);\n    this.white.render(new Point(), new Point(), { scalex: 512, scaley: 240, u_color: [0.125, 0.125, 0.25, 1] });\n\n    this.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n    // this.halo.render(this.sprite1Pos, new Point());\n    this.halo.render(new Point(32, -64), new Point());\n\n    this.setBuffer();\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n    this.backBuffer.render();\n    // this.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n    this.gl.blendFunc(this.gl.DST_COLOR, this.gl.ZERO);\n    this.lightBuffer.render();\n\n    this.gl.flush();\n\n}\n\n",
    "felix.20241003195934.1": "setBuffer(buffer?: BackBuffer): void {\n    const gl = this.gl;\n    if (buffer instanceof BackBuffer) {\n        gl.viewport(0, 0, buffer.size.x, buffer.size.y);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, buffer.fbuffer);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    } else {\n        gl.viewport(0, 0, this.canvasElement.width, this.canvasElement.height);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n}\n\n",
    "felix.20240930235939.1": "public resize(w: number, h: number, noDebounce?: boolean): void {\n    if (noDebounce) {\n        this.canvasElement.width = w;\n        this.canvasElement.height = h;\n        const wRatio = w / (h / Constants.GAME_HEIGHT);\n        this.worldSpaceMatrix = new M3x3().translation(-1, 1).scale(2 / wRatio, -2 / Constants.GAME_HEIGHT);\n        return\n    }\n    // ELSE : debounded resize\n    if (this._resizeTimer) {\n        clearTimeout(this._resizeTimer);\n    }\n    this._resizeTimer = setTimeout(() => {\n        this.canvasElement.width = w;\n        this.canvasElement.height = h;\n        const wRatio = w / (h / Constants.GAME_HEIGHT);\n        this.worldSpaceMatrix = new M3x3().translation(-1, 1).scale(2 / wRatio, -2 / Constants.GAME_HEIGHT);\n    }, 100);\n}\n\n",
    "felix.20240930193901.1": "type TParameters =\n    | { uniform: true; location: WebGLUniformLocation | null; type: number }\n    | { uniform: false; location: number; type: number };\n\nexport class Material {\n\n    public gl!: WebGL2RenderingContext;\n    public program!: WebGLProgram;\n    public parameters: Record<string, TParameters> = {};\n\n    @others\n\n}\n\n",
    "felix.20240930193936.1": "constructor(gl: WebGL2RenderingContext, vs: string, fs: string) {\n    this.gl = gl;\n\n    const vsShader = this.getShader(vs, gl.VERTEX_SHADER);\n    const fsShader = this.getShader(fs, gl.FRAGMENT_SHADER);\n\n    if (vsShader && fsShader) {\n        this.program = gl.createProgram()!;\n        gl.attachShader(this.program, vsShader);\n        gl.attachShader(this.program, fsShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            console.error(\"Cannot load shader \\n\" + gl.getProgramInfoLog(this.program));\n        }\n\n        this.gatherParameters();\n\n        gl.detachShader(this.program, vsShader);\n        gl.detachShader(this.program, fsShader);\n        gl.deleteShader(vsShader);\n        gl.deleteShader(fsShader);\n\n        gl.useProgram(null);\n    }\n}\n\n",
    "felix.20240930194442.1": "getShader(script: string, type: number): WebGLShader | null {\n    const gl = this.gl;\n    const output = gl.createShader(type);\n    if (output) {\n        gl.shaderSource(output, script);\n        gl.compileShader(output);\n        if (!gl.getShaderParameter(output, gl.COMPILE_STATUS)) {\n            console.error(\"Shader Error: \\n\" + gl.getShaderInfoLog(output));\n            return null;\n        }\n    }\n    return output;\n}\n\n",
    "felix.20241003015411.1": "gatherParameters(): void {\n\n    const gl = this.gl;\n    let isUniform = 0;\n\n    this.parameters = {};\n    while (isUniform < 2) {\n        let paramType = isUniform ? gl.ACTIVE_UNIFORMS : gl.ACTIVE_ATTRIBUTES;\n        let count = gl.getProgramParameter(this.program, paramType);\n\n        for (let i = 0; i < count; i++) {\n            let details;\n            let location;\n            if (isUniform) {\n                details = gl.getActiveUniform(this.program, i);\n                location = gl.getUniformLocation(this.program, details!.name);\n            } else {\n                details = gl.getActiveAttrib(this.program, i);\n                location = gl.getAttribLocation(this.program, details!.name);\n            }\n\n            // @ts-expect-error\n            this.parameters[details!.name] = {\n                location: location,\n                uniform: !!isUniform,\n                type: details!.type\n            }\n        }\n        isUniform++;\n    }\n\n}\n\n",
    "felix.20241003021102.1": "setParam(w_name: string, a?: any, b?: any, c?: any, d?: any, e?: any) {\n    const gl = this.gl;\n\n    if (w_name in this.parameters) {\n        const param = this.parameters[w_name];\n        if (param.uniform) {\n            switch (param.type) {\n                case gl.FLOAT: gl.uniform1f(param.location, a); break;\n                case gl.FLOAT_VEC2: gl.uniform2f(param.location, a, b); break;\n                case gl.FLOAT_VEC3: gl.uniform3f(param.location, a, b, c); break;\n                case gl.FLOAT_VEC4: gl.uniform4f(param.location, a, b, c, d); break;\n                case gl.FLOAT_MAT3: gl.uniformMatrix3fv(param.location, false, a); break;\n                case gl.FLOAT_MAT4: gl.uniformMatrix4fv(param.location, false, a); break;\n                case gl.SAMPLER_2D: gl.uniform1i(param.location, a); break;\n            }\n        } else {\n            gl.enableVertexAttribArray(param.location);\n            if (a == undefined) {\n                a = gl.FLOAT;\n            }\n            if (b == undefined) {\n                b = false;\n            }\n            if (c == undefined) {\n                c = 0;\n            }\n            if (d == undefined) {\n                d = 0;\n            }\n\n            switch (param.type) {\n                case gl.FLOAT: gl.vertexAttribPointer(param.location, 1, a, b, c, d); break;\n                case gl.FLOAT_VEC2: gl.vertexAttribPointer(param.location, 2, a, b, c, d); break;\n                case gl.FLOAT_VEC3: gl.vertexAttribPointer(param.location, 3, a, b, c, d); break;\n                case gl.FLOAT_VEC4: gl.vertexAttribPointer(param.location, 4, a, b, c, d); break;\n            }\n        }\n    }\n\n}\n\n",
    "felix.20240930203821.1": "export class Sprite {\n\n    public isLoaded = false;\n    public material: Material;\n    public image: HTMLImageElement;\n    public gl!: WebGL2RenderingContext;\n    public gl_tex!: WebGLTexture;\n    public geo_buff!: WebGLBuffer;\n    public tex_buff!: WebGLBuffer;\n    public size: Point;\n    public uv_x = 0;\n    public uv_y = 0;\n\n    public aPositionLoc!: GLint;\n    public aTexCoordLoc!: GLint;\n    public uImageLoc!: WebGLUniformLocation;\n    public uWorldLoc!: WebGLUniformLocation;\n    public uObjectLoc!: WebGLUniformLocation;\n    public uFrameLoc!: WebGLUniformLocation;\n    @others\n\n}\n\n",
    "felix.20240930204115.1": "\nconstructor(\n    gl: WebGL2RenderingContext,\n    imgURL: string,\n    vs: string,\n    fs: string,\n    options: {\n        height?: number;\n        width?: number;\n    } = {}\n) {\n    this.gl = gl;\n    this.isLoaded = false;\n    this.material = new Material(gl, vs, fs);\n\n    this.size = new Point(64, 64);\n    if (typeof options.width === 'number') {\n        this.size.x = options.width * 1;\n    }\n    if (typeof options.height === 'number') {\n        this.size.y = options.height * 1;\n    }\n\n    this.image = new Image();\n    this.image.src = imgURL;\n    this.image.onload = () => {\n        this.setup();\n    }\n}\n\n",
    "felix.20240930221139.1": "static createRectArray(x = 0, y = 0, w = 1, h = 1) {\n    return new Float32Array([\n        x, y,\n        x + w, y,\n        x, y + h,\n        x, y + h,\n        x + w, y,\n        x + w, y + h,\n    ]);\n}\n\n",
    "felix.20240930204607.1": "setup() {\n\n    const gl = this.gl;\n\n    gl.useProgram(this.material.program);\n    this.gl_tex = gl.createTexture()!;\n\n    gl.bindTexture(gl.TEXTURE_2D, this.gl_tex);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.image);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.uv_x = this.size.x / this.image.width;\n    this.uv_y = this.size.y / this.image.height;\n\n    this.tex_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(0, 0, this.uv_x, this.uv_y), gl.STATIC_DRAW);\n\n    this.geo_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(0, 0, this.size.x, this.size.y), gl.STATIC_DRAW);\n\n    gl.useProgram(null);\n    this.isLoaded = true;\n\n}\n\n",
    "felix.20240930223207.1": "render(position: Point, frames: Point, options?: Record<string, any>) {\n    if (this.isLoaded) {\n        const gl = this.gl;\n\n        const frame_x = Math.floor(frames.x) * this.uv_x;\n        const frame_y = Math.floor(frames.y) * this.uv_y;\n\n        let oMat = new M3x3().translation(position.x, position.y);\n\n        gl.useProgram(this.material.program);\n\n        this.material.setParam(\"u_color\", 1, 1, 1, 1);\n\n        for (const option in options) {\n            // @ts-expect-error\n            this.material.setParam.apply(this.material, [option].concat(options[option]))\n\n            if (option == \"scalex\") {\n                oMat = oMat.scale(options.scalex, 1.0);\n            }\n            if (option == \"scaley\") {\n                oMat = oMat.scale(1.0, options.scaley);\n            }\n        }\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.gl_tex);\n        this.material.setParam(\"u_image\", 0);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n        this.material.setParam(\"a_texCoord\");\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n        this.material.setParam(\"a_position\");\n\n        this.material.setParam(\"u_frame\", frame_x, frame_y);\n        this.material.setParam(\"u_world\", window.game.worldSpaceMatrix.getFloatArray());\n        this.material.setParam(\"u_object\", oMat.getFloatArray());\n\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 6);\n\n        gl.useProgram(null);\n\n    }\n}\n\n",
    "felix.20241003154420.1": "export class BackBuffer {\n\n    public gl!: WebGL2RenderingContext;\n    public material: Material;\n    public size: Point;\n    public fbuffer: WebGLFramebuffer;\n    public rbuffer: WebGLRenderbuffer;\n    public texture: WebGLTexture;\n    public tex_buff: WebGLBuffer;\n    public geo_buff: WebGLBuffer;\n\n    static VS = /*glsl*/ `\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n\n    varying vec2 v_texCoord;\n    void main() {\n        gl_Position = vec4(a_position, 1, 1);\n        v_texCoord = a_texCoord;\n    }\n    `;\n    static FS = /*glsl*/ `\n    precision mediump float;\n    uniform sampler2D u_image;\n    varying vec2 v_texCoord;\n\n    void main(){\n        gl_FragColor = texture2D(u_image, v_texCoord);\n    }\n    `;\n\n    @others\n\n}\n\n",
    "felix.20241003160652.1": "constructor(\n    gl: WebGL2RenderingContext,\n\n    options: {\n        height?: number;\n        width?: number;\n    } = {}\n\n) {\n    this.gl = gl;\n    this.material = new Material(this.gl, BackBuffer.VS, BackBuffer.FS);\n    this.size = new Point(512, 512);\n    if (typeof options.width === 'number') {\n        this.size.x = options.width * 1;\n    }\n    if (typeof options.height === 'number') {\n        this.size.y = options.height * 1;\n    }\n\n    this.fbuffer = gl.createFramebuffer()!;\n    this.rbuffer = gl.createRenderbuffer()!;\n    this.texture = gl.createTexture()!;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.rbuffer);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.size.x, this.size.y, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size.x, this.size.y);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.rbuffer);\n\n    // Create geometry for rendering\n    this.tex_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(), gl.STATIC_DRAW);\n\n    this.geo_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(-1, -1, 2, 2), gl.STATIC_DRAW);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindTexture(gl.RENDERBUFFER, null);\n    gl.bindTexture(gl.FRAMEBUFFER, null);\n\n\n}\n",
    "felix.20241003202629.1": "render() {\n    const gl = this.gl;\n    //\n    gl.useProgram(this.material.program);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    this.material.setParam(\"u_image\", 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n    this.material.setParam(\"a_texCoord\");\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n    this.material.setParam(\"a_position\");\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 6);\n\n    gl.useProgram(null);\n\n}\n\n",
    "felix.20240930231508.1": "@language typescript\n",
    "felix.20240930231747.1": "export class Point {\n\n    public x: number;\n    public y: number;\n\n    @others\n}\n",
    "felix.20240930231816.1": "constructor(x = 0.0, y = 0.0) {\n    this.x = x;\n    this.y = y;\n}\n\n",
    "felix.20240930231857.1": "export class M3x3 {\n\n    public static M00 = 0;\n    public static M01 = 1;\n    public static M02 = 2;\n    public static M10 = 3;\n    public static M11 = 4;\n    public static M12 = 5;\n    public static M20 = 6;\n    public static M21 = 7;\n    public static M22 = 8;\n\n    public matrix: [\n        number, number, number,\n        number, number, number,\n        number, number, number,\n    ];\n\n    @others\n\n}\n\n",
    "felix.20240930232333.1": "constructor() {\n    this.matrix = [\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1\n    ];\n}\n\n",
    "felix.20240930232607.1": "multiply(m: M3x3): M3x3 {\n    const output = new M3x3();\n    output.matrix = [\n        this.matrix[M3x3.M00] * m.matrix[M3x3.M00] + this.matrix[M3x3.M10] * m.matrix[M3x3.M01] + this.matrix[M3x3.M20] * m.matrix[M3x3.M02],\n        this.matrix[M3x3.M01] * m.matrix[M3x3.M00] + this.matrix[M3x3.M11] * m.matrix[M3x3.M01] + this.matrix[M3x3.M21] * m.matrix[M3x3.M02],\n        this.matrix[M3x3.M02] * m.matrix[M3x3.M00] + this.matrix[M3x3.M12] * m.matrix[M3x3.M01] + this.matrix[M3x3.M22] * m.matrix[M3x3.M02],\n\n        this.matrix[M3x3.M00] * m.matrix[M3x3.M10] + this.matrix[M3x3.M10] * m.matrix[M3x3.M11] + this.matrix[M3x3.M20] * m.matrix[M3x3.M12],\n        this.matrix[M3x3.M01] * m.matrix[M3x3.M10] + this.matrix[M3x3.M11] * m.matrix[M3x3.M11] + this.matrix[M3x3.M21] * m.matrix[M3x3.M12],\n        this.matrix[M3x3.M02] * m.matrix[M3x3.M10] + this.matrix[M3x3.M12] * m.matrix[M3x3.M11] + this.matrix[M3x3.M22] * m.matrix[M3x3.M12],\n\n        this.matrix[M3x3.M00] * m.matrix[M3x3.M20] + this.matrix[M3x3.M10] * m.matrix[M3x3.M21] + this.matrix[M3x3.M20] * m.matrix[M3x3.M22],\n        this.matrix[M3x3.M01] * m.matrix[M3x3.M20] + this.matrix[M3x3.M11] * m.matrix[M3x3.M21] + this.matrix[M3x3.M21] * m.matrix[M3x3.M22],\n        this.matrix[M3x3.M02] * m.matrix[M3x3.M20] + this.matrix[M3x3.M12] * m.matrix[M3x3.M21] + this.matrix[M3x3.M22] * m.matrix[M3x3.M22]\n    ];\n    return output;\n}\n\n",
    "felix.20240930232735.1": "translation(x: number, y: number): M3x3 {\n    const output = new M3x3();\n    output.matrix = [\n        this.matrix[M3x3.M00],\n        this.matrix[M3x3.M01],\n        this.matrix[M3x3.M02],\n\n",
    "felix.20240930232836.1": "        this.matrix[M3x3.M10],\n        this.matrix[M3x3.M11],\n        this.matrix[M3x3.M12],\n\n        x * this.matrix[M3x3.M00] + y * this.matrix[M3x3.M10] + this.matrix[M3x3.M20],\n        x * this.matrix[M3x3.M01] + y * this.matrix[M3x3.M11] + this.matrix[M3x3.M21],\n        x * this.matrix[M3x3.M02] + y * this.matrix[M3x3.M12] + this.matrix[M3x3.M22]\n    ];\n    return output;\n}\n\nscale(x: number, y: number): M3x3 {\n    const output = new M3x3();\n    output.matrix = [\n        this.matrix[M3x3.M00] * x,\n        this.matrix[M3x3.M01] * x,\n        this.matrix[M3x3.M02] * x,\n\n        this.matrix[M3x3.M10] * y,\n        this.matrix[M3x3.M11] * y,\n        this.matrix[M3x3.M12] * y,\n\n        this.matrix[M3x3.M20],\n        this.matrix[M3x3.M21],\n        this.matrix[M3x3.M22]\n    ];\n    return output;\n}\n\n",
    "felix.20240930232910.1": "getFloatArray(): Float32Array {\n    return new Float32Array(this.matrix);\n}\n\n",
    "felix.20240930165848.1": "import { Game } from './main';\n\nexport { };\n\ndeclare global {\n  interface Window {\n    game: Game;\n  }\n}\n",
    "felix.20240930165631.1": "@others\n",
    "felix.20240721001316.1": "<< imports >>\n@others\n",
    "felix.20240930170311.1": "import * as Constants from \"./constants\";\nimport { Point, M3x3 } from \"./maths\";\n\n",
    "felix.20240930143411.1": "document.addEventListener('DOMContentLoaded', (event) => {\n    if (!window.game) {\n        window.game = new Game();\n        window.game.resize(\n            window.innerWidth,\n            window.innerHeight,\n            true // First resize not debounced.\n        );\n        loop();\n    } else {\n        console.log('Game instance already started');\n    }\n});\nwindow.addEventListener('resize', (event) => {\n    if (window.game) {\n        window.game.resize(\n            window.innerWidth,\n            window.innerHeight\n        );\n    }\n});\n\nfunction loop(): void {\n    window.game.update();\n    requestAnimationFrame(loop);\n}\n\n",
    "felix.20240930231528.1": "@others\n"
  }
}