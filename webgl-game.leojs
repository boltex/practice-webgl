{
  "leoHeader": {
    "fileFormat": 2
  },
  "vnodes": [
    {
      "gnx": "felix.20240930010237.1",
      "vh": "WebGL Game",
      "children": [
        {
          "gnx": "felix.20241008233506.1",
          "vh": "types"
        },
        {
          "gnx": "felix.20240930165615.1",
          "vh": "Constants"
        },
        {
          "gnx": "felix.20241010224031.1",
          "vh": "class AI",
          "children": [
            {
              "gnx": "felix.20241010224036.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20241010224214.1",
              "vh": "process"
            },
            {
              "gnx": "felix.20241010224842.1",
              "vh": "alien"
            }
          ]
        },
        {
          "gnx": "felix.20240930010401.1",
          "vh": "class Game",
          "children": [
            {
              "gnx": "felix.20240930173811.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20241008224355.1",
              "vh": "initGameStates"
            },
            {
              "gnx": "felix.20241005235012.1",
              "vh": "changeOrientation"
            },
            {
              "gnx": "felix.20241003222533.1",
              "vh": "gatherRenderables"
            },
            {
              "gnx": "felix.20240930235939.1",
              "vh": "resize"
            },
            {
              "gnx": "felix.20241003195934.1",
              "vh": "setBuffer"
            },
            {
              "gnx": "felix.20241003235238.1",
              "vh": "setBlendMode"
            },
            {
              "gnx": "felix.20241005222312.1",
              "vh": "checkKeys"
            },
            {
              "gnx": "felix.20240930173750.1",
              "vh": "update"
            },
            {
              "gnx": "felix.20241009235517.1",
              "vh": "checkUpdate"
            },
            {
              "gnx": "felix.20241006210656.1",
              "vh": "tick"
            },
            {
              "gnx": "felix.20241006212853.1",
              "vh": "interpolate"
            },
            {
              "gnx": "felix.20241006182402.1",
              "vh": "render"
            }
          ]
        },
        {
          "gnx": "felix.20240930193901.1",
          "vh": "class Material",
          "children": [
            {
              "gnx": "felix.20240930193936.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930194442.1",
              "vh": "getShader"
            },
            {
              "gnx": "felix.20241003015411.1",
              "vh": "gatherParameters"
            },
            {
              "gnx": "felix.20241003021102.1",
              "vh": "setParam & helpers",
              "children": [
                {
                  "gnx": "felix.20241004162718.1",
                  "vh": "setUniform"
                },
                {
                  "gnx": "felix.20241004162726.1",
                  "vh": "setAttribute"
                }
              ]
            }
          ]
        },
        {
          "gnx": "felix.20240930203821.1",
          "vh": "class Sprite",
          "children": [
            {
              "gnx": "felix.20240930204115.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930221139.1",
              "vh": "static createRectArray"
            },
            {
              "gnx": "felix.20240930204607.1",
              "vh": "setup"
            },
            {
              "gnx": "felix.20240930223207.1",
              "vh": "render"
            }
          ]
        },
        {
          "gnx": "felix.20241003154420.1",
          "vh": "class BackBuffer",
          "children": [
            {
              "gnx": "felix.20241003160652.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20241003202629.1",
              "vh": "render"
            }
          ]
        },
        {
          "gnx": "felix.20241006145459.1",
          "vh": "class Entities",
          "children": [
            {
              "gnx": "felix.20241006145511.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20241007222244.1",
              "vh": "spawn"
            },
            {
              "gnx": "felix.20241007222248.1",
              "vh": "remove"
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20240930231508.1",
      "vh": "Maths",
      "children": [
        {
          "gnx": "felix.20240930231747.1",
          "vh": "class Point",
          "children": [
            {
              "gnx": "felix.20240930231816.1",
              "vh": "constructor"
            }
          ]
        },
        {
          "gnx": "felix.20240930231857.1",
          "vh": "class M3x3",
          "children": [
            {
              "gnx": "felix.20240930232333.1",
              "vh": "constructor"
            },
            {
              "gnx": "felix.20240930232607.1",
              "vh": "multiply"
            },
            {
              "gnx": "felix.20240930232735.1",
              "vh": "translation"
            },
            {
              "gnx": "felix.20240930232836.1",
              "vh": "scale"
            },
            {
              "gnx": "felix.20240930232910.1",
              "vh": "getFloatArray"
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20240721001224.1",
      "vh": "External Files",
      "children": [
        {
          "gnx": "felix.20240930165848.1",
          "vh": "@clean src/globals.d.ts"
        },
        {
          "gnx": "felix.20241008232538.1",
          "vh": "@clean src/type.ts",
          "children": [
            {
              "gnx": "felix.20241008233501.1",
              "vh": "<< imports >>"
            },
            {
              "gnx": "felix.20241008233506.1"
            }
          ]
        },
        {
          "gnx": "felix.20240930165631.1",
          "vh": "@clean src/constants.ts",
          "children": [
            {
              "gnx": "felix.20240930165615.1"
            }
          ]
        },
        {
          "gnx": "felix.20240721001316.1",
          "vh": "@clean src/main.ts",
          "children": [
            {
              "gnx": "felix.20240930170311.1",
              "vh": "<< imports >>"
            },
            {
              "gnx": "felix.20240930143411.1",
              "vh": "Startup"
            },
            {
              "gnx": "felix.20240930010401.1"
            },
            {
              "gnx": "felix.20240930193901.1"
            },
            {
              "gnx": "felix.20240930203821.1"
            },
            {
              "gnx": "felix.20241003154420.1"
            },
            {
              "gnx": "felix.20241006145459.1"
            },
            {
              "gnx": "felix.20241010224031.1"
            }
          ]
        },
        {
          "gnx": "felix.20240930231528.1",
          "vh": "@clean src/maths.ts",
          "children": [
            {
              "gnx": "felix.20240930231747.1"
            },
            {
              "gnx": "felix.20240930231857.1"
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20240929225725.1",
      "vh": "@auto README.md"
    }
  ],
  "tnodes": {
    "felix.20240930010237.1": "@language typescript\n",
    "felix.20241008233506.1": "export type Renderable = {\n    sprite: string;\n    oldPosition: Point;\n    position: Point;\n    frame: Point;\n    flip: boolean;\n    blendmode: number;\n    options: Record<string, any>;\n};\n\nexport type RenderableLayer = {\n    blendmode: number;\n    objs: Renderable[];\n};\n\nexport type RenderableLayers = {\n    layers: RenderableLayer[];\n};\n\nexport type TParameters =\n    | {\n        uniform: true;\n        location: WebGLUniformLocation;\n        type: number;\n    }\n    | {\n        uniform: false;\n        location: number;\n        type: number;\n    };\n\nexport type TCommand = {\n    order: number;\n    x: number;\n    y: number;\n    entityId: number;\n}\n\nexport type TEntity = {\n    id: number;\n    // states\n    type: number;\n    hitPoints: number;\n    state: number;\n    x: number;\n    y: number;\n    orientation: number;\n    frameIndex: number;\n    // Ten queuable commands\n    orderQty: number;\n    orderIndex: number;\n    orderPool: [\n        TCommand, TCommand, TCommand, TCommand, TCommand,\n        TCommand, TCommand, TCommand, TCommand, TCommand\n    ];\n    active: boolean;\n}",
    "felix.20240930165615.1": "export const SCREEN_WIDTH = 800;\nexport const SCREEN_HEIGHT = 600;\nexport const SPRITE_SIZE = 32;\nexport const GAME_HEIGHT = 240;\n\nexport const vertexShaderSource = /*glsl*/ `\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n\n    uniform mat3 u_world;\n    uniform mat3 u_object;\n    uniform vec2 u_frame;\n\n    varying vec2 v_texCoord;\n    void main() {\n        gl_Position = vec4(u_world * u_object * vec3(a_position, 1), 1);\n        v_texCoord = a_texCoord + u_frame;\n    }\n`;\n\nexport const fragmentShaderSource = /*glsl*/ `\n    precision mediump float;\n    uniform sampler2D u_image;\n    uniform vec4 u_color;\n    varying vec2 v_texCoord;\n\n    void main(){\n        gl_FragColor = u_color * texture2D(u_image, v_texCoord);\n    }\n`;\n\n",
    "felix.20241010224031.1": "export class AI {\n\n    public game: Game;\n\n    @others\n\n}\n",
    "felix.20241010224036.1": "constructor(game: Game) {\n    this.game = game;\n}\n\n",
    "felix.20241010224214.1": "public process(entity: TEntity): void {\n    switch (entity.type) {\n        case 1:\n            this.alien(entity)\n            break;\n\n        default:\n            break;\n    }\n}\n\n",
    "felix.20241010224842.1": "private alien(entity: TEntity): void {\n    // test just move forward in animations\n    // 249 is the number of frames in the sprite sheet\n    entity.frameIndex = (entity.frameIndex + 1) % 249;\n    entity.orientation = this.game.testSpriteOrientation;\n    // TODO : Add more behaviors!\n}\n\n",
    "felix.20240930010401.1": "export class Game {\n\n    public started = false;\n    public canvasElement: HTMLCanvasElement;\n    public gl!: WebGL2RenderingContext;\n    public ctx!: any;\n\n    public finalBuffer: BackBuffer;\n    public backBuffer: BackBuffer;\n    public sprites: Record<string, Sprite>;\n    public renderables!: RenderableLayers;\n\n    public worldSpaceMatrix: M3x3;\n\n    // Game States\n    public entities!: Entities;\n\n    // A.I.\n    public ai!: AI;\n\n    // Key press state\n    public keysPressed: Record<string, any> = {};\n\n    // Test Orientation\n    public testSpriteOrientation = 0;\n\n    // FPS counter\n    public lastTime = 0;\n    public fps = 0;\n    public fpsInterval = 1000; // Update FPS every 1 second\n    public fpsLastTime = 0;\n\n    public accumulator = 0; // What remained in deltaTime after last update \n    public timeSoFar = 0; // t in ms\n    public currentTick = 0;\n    public timePerTick = 125; // dt in ms (125 is 8 per second)\n    public timerTriggerAccum = this.timePerTick * 3; // 3 times the timePerTick\n\n    // public testFrameCount = 249; // Number of frames in the sprite sheet\n\n    private _resizeTimer: ReturnType<typeof setTimeout> | undefined;\n\n    static BLENDMODE_ALPHA = 0;\n    static BLENDMODE_ADDITIVE = 1;\n    static BLENDMODE_MULTIPLY = 2;\n\n    @others\n}\n\n",
    "felix.20240930173811.1": "constructor() {\n    console.log('Init WebGL2 Game !');\n\n    this.canvasElement = document.createElement(\"canvas\");\n    this.canvasElement.width = Constants.SCREEN_WIDTH;\n    this.canvasElement.height = Constants.SCREEN_HEIGHT;\n\n    this.worldSpaceMatrix = new M3x3();\n\n    this.gl = this.canvasElement.getContext('webgl2')!;\n    this.gl.clearColor(0.4, 0.6, 1.0, 1.0);\n    this.gl.enable(this.gl.BLEND);\n\n    document.body.appendChild(this.canvasElement);\n\n    // Add event listeners for key presses\n    document.addEventListener('keydown', (e) => {\n        this.keysPressed[e.key] = true;\n    });\n\n    document.addEventListener('keyup', (e) => {\n        this.keysPressed[e.key] = false;\n    });\n\n    // Create the start button\n    const startButton = document.createElement(\"button\");\n    startButton.textContent = \"Start Game\";\n    startButton.style.position = \"absolute\";\n    startButton.style.top = \"50%\";\n    startButton.style.left = \"50%\";\n    startButton.style.transform = \"translate(-50%, -50%)\";\n    startButton.style.padding = \"10px 20px\";\n    startButton.style.fontSize = \"18px\";\n    document.body.appendChild(startButton);\n    startButton.addEventListener(\"click\", () => {\n        // Start the game only after button is clicked\n        console.log('Starting the game!');\n        // Hide and remove the button\n        startButton.style.display = 'none';\n        document.body.style.cursor = 'none';\n        this.started = true;\n        // Setup timer in case RAF Skipped when not in foreground or minimized.\n        setInterval(() => { this.checkUpdate(); }, 500);\n        loop(0);\n    });\n\n    this.backBuffer = new BackBuffer(this.gl, { width: 512, height: 240 });\n    this.finalBuffer = new BackBuffer(this.gl, { width: 512, height: 240 });\n\n    this.sprites = {\n        \"alien\": new Sprite(\n            this.gl,\n            \"images/alien.png\",\n            Constants.vertexShaderSource,\n            Constants.fragmentShaderSource,\n            {\n                width: 64,\n                height: 64,\n            }\n        ),\n        \"halo\": new Sprite(this.gl, \"images/halo.png\", Constants.vertexShaderSource,\n            Constants.fragmentShaderSource, {\n            width: 256,\n            height: 256,\n        }),\n        \"white\": new Sprite(this.gl, \"images/white.png\", Constants.vertexShaderSource,\n            Constants.fragmentShaderSource, {\n            width: 1,\n            height: 1,\n        })\n\n    };\n\n    this.initGameStates();\n\n}\n\n",
    "felix.20241008224355.1": "initGameStates(): void {\n    // Fill entities\n    this.entities = new Entities(100);\n    this.ai = new AI(this);\n\n    // Create 2 test Aliens\n    const alien1 = this.entities.spawn();\n    alien1.type = 1;\n    alien1.hitPoints = 100;\n    alien1.x = 10;\n    alien1.y = 10;\n    const alien2 = this.entities.spawn();\n    alien2.type = 1;\n    alien2.hitPoints = 100;\n    alien2.x = 50;\n    alien2.y = 50;\n\n}\n\n",
    "felix.20241005235012.1": "changeOrientation(clockwise: boolean) {\n    // EXPERIMENTAL METHOD - WILL BE DELETED\n    if (clockwise) {\n        this.testSpriteOrientation = this.testSpriteOrientation + 1;\n    } else {\n        this.testSpriteOrientation = this.testSpriteOrientation - 1;\n    }\n    if (this.testSpriteOrientation > 15) {\n        this.testSpriteOrientation = 0;\n    } else if (this.testSpriteOrientation < 0) {\n        this.testSpriteOrientation = 15;\n    }\n}\n\n",
    "felix.20241003222533.1": "gatherRenderables(): void {\n    this.renderables = {\n        layers: [\n            {\n                blendmode: Game.BLENDMODE_ALPHA,\n                objs: [\n                    {\n                        sprite: \"alien\",\n                        position: { x: 32, y: 32 },\n                        oldPosition: { x: 32, y: 32 },\n                        frame: { x: 0, y: 0 },\n                        flip: false,\n                        blendmode: Game.BLENDMODE_ALPHA,\n                        options: {}\n                    },\n                    {\n                        sprite: \"alien\",\n                        position: { x: 64, y: 64 },\n                        oldPosition: { x: 64, y: 64 },\n                        frame: { x: 0, y: 0 },\n                        flip: false,\n                        blendmode: Game.BLENDMODE_ALPHA,\n                        options: {}\n                    }\n                ]\n            },\n            {\n                blendmode: Game.BLENDMODE_MULTIPLY,\n                objs: [\n                    {\n                        sprite: \"white\",\n                        position: { x: 0, y: 0 },\n                        oldPosition: { x: 0, y: 0 },\n                        frame: { x: 0, y: 0 },\n                        flip: false,\n                        blendmode: Game.BLENDMODE_ALPHA,\n                        options: {\n                            scalex: 512, scaley: 240,\n                            u_color: [0.5, 0.125, 0.25, 1]\n                        }\n                    },\n                    {\n                        sprite: \"halo\",\n                        position: { x: 128, y: 80 },\n                        oldPosition: { x: 128, y: 80 },\n                        frame: { x: 0, y: 0 },\n                        flip: false,\n                        blendmode: Game.BLENDMODE_ADDITIVE,\n                        options: {}\n                    }\n                ]\n            },\n        ]\n    }\n}\n\n",
    "felix.20240930235939.1": "resize(w: number, h: number, noDebounce?: boolean): void {\n    if (noDebounce) {\n        this.canvasElement.width = w;\n        this.canvasElement.height = h;\n        const wRatio = w / (h / Constants.GAME_HEIGHT);\n        this.worldSpaceMatrix = new M3x3().translation(-1, 1).scale(2 / wRatio, -2 / Constants.GAME_HEIGHT);\n    } else {\n        // Debounced resize\n        if (this._resizeTimer) {\n            clearTimeout(this._resizeTimer);\n        }\n        this._resizeTimer = setTimeout(() => {\n            this.canvasElement.width = w;\n            this.canvasElement.height = h;\n            const wRatio = w / (h / Constants.GAME_HEIGHT);\n            this.worldSpaceMatrix = new M3x3().translation(-1, 1).scale(2 / wRatio, -2 / Constants.GAME_HEIGHT);\n        }, 100);\n    }\n}\n\n",
    "felix.20241003195934.1": "setBuffer(buffer?: BackBuffer): void {\n    const gl = this.gl;\n    if (buffer instanceof BackBuffer) {\n        gl.viewport(0, 0, buffer.size.x, buffer.size.y);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, buffer.fbuffer);\n    } else {\n        gl.viewport(0, 0, this.canvasElement.width, this.canvasElement.height);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n}\n\n",
    "felix.20241003235238.1": "setBlendMode(bm: number): void {\n    switch (bm) {\n        case Game.BLENDMODE_ALPHA:\n            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA); break;\n        case Game.BLENDMODE_ADDITIVE:\n            this.gl.blendFunc(this.gl.ONE, this.gl.ONE); break;\n        case Game.BLENDMODE_MULTIPLY:\n            this.gl.blendFunc(this.gl.DST_COLOR, this.gl.ZERO); break;\n    }\n}\n\n",
    "felix.20241005222312.1": "checkKeys(): void {\n    if (this.keysPressed['ArrowUp'] || this.keysPressed['w']) {\n        // playerY -= playerSpeed * deltaTime;\n    }\n    if (this.keysPressed['ArrowDown'] || this.keysPressed['s']) {\n        // playerY += playerSpeed * deltaTime;\n    }\n    if (this.keysPressed['ArrowLeft'] || this.keysPressed['a']) {\n        // playerX -= playerSpeed * deltaTime;\n        this.changeOrientation(false);\n    }\n    if (this.keysPressed['ArrowRight'] || this.keysPressed['d']) {\n        // playerX += playerSpeed * deltaTime;\n        this.changeOrientation(true);\n    }\n}\n\n",
    "felix.20240930173750.1": "update(timestamp: number, skipRender?: boolean): void {\n\n    const deltaTime = timestamp - this.lastTime;\n    this.lastTime = timestamp;\n\n    this.accumulator += deltaTime;\n\n    while (this.accumulator >= this.timePerTick) {\n        this.tick();\n        this.accumulator -= this.timePerTick;\n        this.timeSoFar += this.timePerTick;\n    }\n\n    if (!skipRender) {\n        this.gatherRenderables();\n        this.render(this.accumulator / this.timePerTick);\n    }\n\n    // Calculate FPS\n    if (timestamp - this.fpsLastTime > this.fpsInterval) {\n        this.fps = Math.round(1000 / deltaTime);\n        this.fpsLastTime = timestamp;\n        // console.log('RFA FPS ', this.fps); // 30\n    }\n}\n\n",
    "felix.20241009235517.1": "public checkUpdate(): void {\n    // Checks for needed ticks to be computed if game is minimized\n    const timestamp = performance.now();\n    const deltaTime = timestamp - this.lastTime;\n    if ((this.accumulator + deltaTime) < this.timerTriggerAccum) {\n        return;\n    }\n    // It's been a while, game is minimized: update without rendering.\n    this.update(timestamp, true);\n}\n\n",
    "felix.20241006210656.1": "tick(): void {\n    // Advance game states in pool:\n    // from this.timeSoFar, by a this.timePerTick amount of time.\n    // meaning, from currentTick count, to the next one.\n\n    let processed = 0;\n    let entity;\n    for (let i = 0; processed >= this.entities.active || i > this.entities.total; i++) {\n        entity = this.entities.pool[i];\n        if (entity.active) {\n            processed += 1;\n            this.ai.process(entity);\n        }\n    }\n\n    this.checkKeys();\n\n    // Update currentTick count\n    this.currentTick += 1;\n}\n\n",
    "felix.20241006212853.1": "interpolate(min: Point, max: Point, fract: number): Point {\n    return new Point(max.x + (min.x - max.x) * fract, max.y + (min.y - max.y) * fract);\n}\n\n",
    "felix.20241006182402.1": "render(interpolation: number): void {\n    for (let l = 0; l < this.renderables.layers.length; l++) {\n        const layer = this.renderables.layers[l];\n\n        this.setBuffer(this.backBuffer);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n        for (let i = 0; i < layer.objs.length; i++) {\n            const obj = layer.objs[i];\n            const sprite = this.sprites[obj.sprite];\n\n            this.setBlendMode(obj.blendmode);\n            sprite.render(this.interpolate(obj.oldPosition, obj.position, interpolation), obj.frame, obj.options);\n        }\n\n        this.setBlendMode(layer.blendmode);\n        this.setBuffer(this.finalBuffer);\n        this.backBuffer.render();\n\n    }\n\n    this.setBuffer();\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    this.setBlendMode(Game.BLENDMODE_ALPHA);\n    this.finalBuffer.render();\n\n    this.gl.flush();\n}\n\n",
    "felix.20240930193901.1": "export class Material {\n\n    public gl!: WebGL2RenderingContext;\n    public program!: WebGLProgram;\n    public parameters: Record<string, TParameters> = {};\n\n    @others\n\n}\n\n",
    "felix.20240930193936.1": "constructor(gl: WebGL2RenderingContext, vs: string, fs: string) {\n    this.gl = gl;\n\n    const vsShader = this.getShader(vs, gl.VERTEX_SHADER);\n    const fsShader = this.getShader(fs, gl.FRAGMENT_SHADER);\n\n    if (vsShader && fsShader) {\n        this.program = gl.createProgram()!;\n        gl.attachShader(this.program, vsShader);\n        gl.attachShader(this.program, fsShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            console.error(\"Cannot load shader \\n\" + gl.getProgramInfoLog(this.program));\n        }\n\n        this.gatherParameters();\n\n        gl.detachShader(this.program, vsShader);\n        gl.detachShader(this.program, fsShader);\n        gl.deleteShader(vsShader);\n        gl.deleteShader(fsShader);\n\n        gl.useProgram(null);\n    }\n}\n\n",
    "felix.20240930194442.1": "getShader(script: string, type: number): WebGLShader | null {\n    const gl = this.gl;\n    const output = gl.createShader(type);\n    if (output) {\n        gl.shaderSource(output, script);\n        gl.compileShader(output);\n        if (!gl.getShaderParameter(output, gl.COMPILE_STATUS)) {\n            console.error(\"Shader Error: \\n\" + gl.getShaderInfoLog(output));\n            return null;\n        }\n    }\n    return output;\n}\n\n",
    "felix.20241003015411.1": "gatherParameters(): void {\n    const gl = this.gl;\n    let isUniform = 0;\n\n    this.parameters = {};\n    while (isUniform < 2) {\n        let paramType = isUniform ? gl.ACTIVE_UNIFORMS : gl.ACTIVE_ATTRIBUTES;\n        let count = gl.getProgramParameter(this.program, paramType);\n\n        for (let i = 0; i < count; i++) {\n            let details;\n            let location;\n            if (isUniform) {\n                details = gl.getActiveUniform(this.program, i);\n                location = gl.getUniformLocation(this.program, details!.name);\n                this.parameters[details!.name] = {\n                    location: location as WebGLUniformLocation,\n                    uniform: true,\n                    type: details!.type\n                };\n            } else {\n                details = gl.getActiveAttrib(this.program, i);\n                location = gl.getAttribLocation(this.program, details!.name);\n                this.parameters[details!.name] = {\n                    location: location as number,\n                    uniform: false,\n                    type: details!.type\n                };\n            }\n\n        }\n        isUniform++;\n    }\n\n}\n\n",
    "felix.20241003021102.1": "setParam(w_name: string, a?: any, b?: any, c?: any, d?: any) {\n\n    if (!(w_name in this.parameters)) {\n        return;\n    }\n\n    const gl = this.gl;\n    const param = this.parameters[w_name];\n\n    if (param.uniform) {\n        this.setUniform(param, a, b, c, d);\n    } else {\n        this.setAttribute(param, a, b, c, d);\n    }\n\n}\n\n",
    "felix.20241004162718.1": "private setUniform(param: TParameters & { uniform: true }, a?: any, b?: any, c?: any, d?: any) {\n    const gl = this.gl;\n\n    switch (param.type) {\n        case gl.FLOAT:\n            gl.uniform1f(param.location, a);\n            break;\n        case gl.FLOAT_VEC2:\n            gl.uniform2f(param.location, a, b);\n            break;\n        case gl.FLOAT_VEC3:\n            gl.uniform3f(param.location, a, b, c);\n            break;\n        case gl.FLOAT_VEC4:\n            gl.uniform4f(param.location, a, b, c, d);\n            break;\n        case gl.FLOAT_MAT3:\n            gl.uniformMatrix3fv(param.location, false, a);\n            break;\n        case gl.FLOAT_MAT4:\n            gl.uniformMatrix4fv(param.location, false, a);\n            break;\n        case gl.SAMPLER_2D:\n            gl.uniform1i(param.location, a);\n            break;\n        default:\n            console.warn(`Unsupported uniform type: ${param.type}`);\n    }\n}\n\n",
    "felix.20241004162726.1": "private setAttribute(param: TParameters & { uniform: false }, a?: any, b?: any, c?: any, d?: any) {\n    const gl = this.gl;\n\n    gl.enableVertexAttribArray(param.location);\n    const type = a ?? gl.FLOAT;\n    const normalized = b ?? false;\n    const stride = c ?? 0;\n    const offset = d ?? 0;\n\n    switch (param.type) {\n        case gl.FLOAT:\n            gl.vertexAttribPointer(param.location, 1, type, normalized, stride, offset);\n            break;\n        case gl.FLOAT_VEC2:\n            gl.vertexAttribPointer(param.location, 2, type, normalized, stride, offset);\n            break;\n        case gl.FLOAT_VEC3:\n            gl.vertexAttribPointer(param.location, 3, type, normalized, stride, offset);\n            break;\n        case gl.FLOAT_VEC4:\n            gl.vertexAttribPointer(param.location, 4, type, normalized, stride, offset);\n            break;\n        default:\n            console.warn(`Unsupported attribute type: ${param.type}`);\n    }\n}\n",
    "felix.20240930203821.1": "export class Sprite {\n\n    public isLoaded = false;\n    public material: Material;\n    public image: HTMLImageElement;\n    public gl!: WebGL2RenderingContext;\n    public gl_tex!: WebGLTexture;\n    public geo_buff!: WebGLBuffer;\n    public tex_buff!: WebGLBuffer;\n    public size: Point;\n    public uv_x = 0;\n    public uv_y = 0;\n\n    public aPositionLoc!: GLint;\n    public aTexCoordLoc!: GLint;\n    public uImageLoc!: WebGLUniformLocation;\n    public uWorldLoc!: WebGLUniformLocation;\n    public uObjectLoc!: WebGLUniformLocation;\n    public uFrameLoc!: WebGLUniformLocation;\n\n    @others\n\n}\n\n",
    "felix.20240930204115.1": "constructor(\n    gl: WebGL2RenderingContext,\n    imgURL: string,\n    vs: string,\n    fs: string,\n    options: {\n        height?: number;\n        width?: number;\n    } = {}\n) {\n    this.gl = gl;\n    this.isLoaded = false;\n    this.material = new Material(gl, vs, fs);\n\n    this.size = new Point(64, 64);\n    if (typeof options.width === 'number') {\n        this.size.x = options.width * 1;\n    }\n    if (typeof options.height === 'number') {\n        this.size.y = options.height * 1;\n    }\n\n    this.image = new Image();\n    this.image.src = imgURL;\n    this.image.onload = () => {\n        this.setup();\n    }\n}\n\n",
    "felix.20240930221139.1": "static createRectArray(x = 0, y = 0, w = 1, h = 1) {\n    return new Float32Array([\n        x, y,\n        x + w, y,\n        x, y + h,\n        x, y + h,\n        x + w, y,\n        x + w, y + h,\n    ]);\n}\n\n",
    "felix.20240930204607.1": "setup() {\n\n    const gl = this.gl;\n\n    gl.useProgram(this.material.program);\n    this.gl_tex = gl.createTexture()!;\n\n    gl.bindTexture(gl.TEXTURE_2D, this.gl_tex);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.image);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.uv_x = this.size.x / this.image.width;\n    this.uv_y = this.size.y / this.image.height;\n\n    this.tex_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(0, 0, this.uv_x, this.uv_y), gl.STATIC_DRAW);\n\n    this.geo_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(0, 0, this.size.x, this.size.y), gl.STATIC_DRAW);\n\n    gl.useProgram(null);\n    this.isLoaded = true;\n\n}\n\n",
    "felix.20240930223207.1": "render(position: Point, frames: Point, options?: Record<string, any>) {\n    if (this.isLoaded) {\n        const gl = this.gl;\n\n        const frame_x = Math.floor(frames.x) * this.uv_x;\n        const frame_y = Math.floor(frames.y) * this.uv_y;\n\n        let oMat = new M3x3().translation(position.x, position.y);\n\n        gl.useProgram(this.material.program);\n\n        this.material.setParam(\"u_color\", 1, 1, 1, 1);\n\n        for (const option in options) {\n            const optionValue = options[option];\n            this.material.setParam(option, ...optionValue);\n\n            if (option == \"scalex\") {\n                oMat = oMat.scale(options.scalex, 1.0);\n            }\n            if (option == \"scaley\") {\n                oMat = oMat.scale(1.0, options.scaley);\n            }\n        }\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.gl_tex);\n        this.material.setParam(\"u_image\", 0);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n        this.material.setParam(\"a_texCoord\");\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n        this.material.setParam(\"a_position\");\n\n        this.material.setParam(\"u_frame\", frame_x, frame_y);\n        this.material.setParam(\"u_world\", window.game.worldSpaceMatrix.getFloatArray());\n        this.material.setParam(\"u_object\", oMat.getFloatArray());\n\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 6);\n\n        gl.useProgram(null);\n\n    }\n}\n",
    "felix.20241003154420.1": "export class BackBuffer {\n\n    public gl!: WebGL2RenderingContext;\n    public material: Material;\n    public size: Point;\n    public fbuffer: WebGLFramebuffer;\n    public rbuffer: WebGLRenderbuffer;\n    public texture: WebGLTexture;\n    public tex_buff: WebGLBuffer;\n    public geo_buff: WebGLBuffer;\n\n    static VS = /*glsl*/ `\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n\n    varying vec2 v_texCoord;\n    void main() {\n        gl_Position = vec4(a_position, 1, 1);\n        v_texCoord = a_texCoord;\n    }\n    `;\n    static FS = /*glsl*/ `\n    precision mediump float;\n    uniform sampler2D u_image;\n    varying vec2 v_texCoord;\n\n    void main(){\n        gl_FragColor = texture2D(u_image, v_texCoord);\n    }\n    `;\n\n    @others\n\n}\n\n",
    "felix.20241003160652.1": "constructor(\n    gl: WebGL2RenderingContext,\n\n    options: {\n        height?: number;\n        width?: number;\n    } = {}\n\n) {\n    this.gl = gl;\n    this.material = new Material(this.gl, BackBuffer.VS, BackBuffer.FS);\n    this.size = new Point(512, 512);\n    if (typeof options.width === 'number') {\n        this.size.x = options.width * 1;\n    }\n    if (typeof options.height === 'number') {\n        this.size.y = options.height * 1;\n    }\n\n    this.fbuffer = gl.createFramebuffer()!;\n    this.rbuffer = gl.createRenderbuffer()!;\n    this.texture = gl.createTexture()!;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.rbuffer);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.size.x, this.size.y, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.size.x, this.size.y);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.rbuffer);\n\n    // Create geometry for rendering\n    this.tex_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(), gl.STATIC_DRAW);\n\n    this.geo_buff = gl.createBuffer()!;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n    gl.bufferData(gl.ARRAY_BUFFER, Sprite.createRectArray(-1, -1, 2, 2), gl.STATIC_DRAW);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    // gl.bindTexture(gl.RENDERBUFFER, null); // ! GIVES WARNING\n    // gl.bindTexture(gl.FRAMEBUFFER, null); // ! GIVES WARNING\n}\n\n",
    "felix.20241003202629.1": "render() {\n    const gl = this.gl;\n\n    gl.useProgram(this.material.program);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    this.material.setParam(\"u_image\", 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.tex_buff);\n    this.material.setParam(\"a_texCoord\");\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.geo_buff);\n    this.material.setParam(\"a_position\");\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 6);\n\n    gl.useProgram(null);\n\n}\n",
    "felix.20241006145459.1": "\n\n/**\n * Singleton Entities Object Pool\n */\nexport class Entities {\n\n    public total: number;\n    public active: number = 0;\n    public pool: Array<TEntity> = [];\n    private lastId = 0;\n\n    @others\n\n}\n",
    "felix.20241006145511.1": "constructor(initialPoolSize: number) {\n    this.total = initialPoolSize;\n    for (let i = 0; i < initialPoolSize; i++) {\n        this.pool.push({\n            id: 0,\n            type: 0,\n            hitPoints: 0,\n            state: 0,\n            x: 0,\n            y: 0,\n            orderQty: 0,\n            orderIndex: 0,\n            orderPool: [\n                { order: 0, x: 0, y: 0, entityId: 0 }, { order: 0, x: 0, y: 0, entityId: 0 },\n                { order: 0, x: 0, y: 0, entityId: 0 }, { order: 0, x: 0, y: 0, entityId: 0 },\n                { order: 0, x: 0, y: 0, entityId: 0 }, { order: 0, x: 0, y: 0, entityId: 0 },\n                { order: 0, x: 0, y: 0, entityId: 0 }, { order: 0, x: 0, y: 0, entityId: 0 },\n                { order: 0, x: 0, y: 0, entityId: 0 }, { order: 0, x: 0, y: 0, entityId: 0 },\n            ],\n            orientation: 0,\n            frameIndex: 0,\n            active: false,\n        });\n    }\n\n}\n\n",
    "felix.20241007222244.1": "spawn(): TEntity {\n    if (this.active === this.total) {\n        throw new Error(\"Pool Full\");\n    }\n    const entity = this.pool.find(e => !e.active);\n    if (entity) {\n        entity.active = true;\n        entity.id = ++this.lastId;\n        this.active++;\n        return entity;\n    } else {\n        throw new Error(\"Pool Full\");\n    }\n}\n\n",
    "felix.20241007222248.1": "remove(entity: TEntity): void {\n    this.active--;\n    entity.active = false;\n}\n\n",
    "felix.20240930231508.1": "@language typescript\n",
    "felix.20240930231747.1": "export class Point {\n\n    public x: number;\n    public y: number;\n\n    @others\n}\n",
    "felix.20240930231816.1": "constructor(x = 0.0, y = 0.0) {\n    this.x = x;\n    this.y = y;\n}\n\n",
    "felix.20240930231857.1": "export class M3x3 {\n\n    public static M00 = 0;\n    public static M01 = 1;\n    public static M02 = 2;\n    public static M10 = 3;\n    public static M11 = 4;\n    public static M12 = 5;\n    public static M20 = 6;\n    public static M21 = 7;\n    public static M22 = 8;\n\n    public matrix: [\n        number, number, number,\n        number, number, number,\n        number, number, number,\n    ];\n\n    @others\n\n}\n\n",
    "felix.20240930232333.1": "constructor() {\n    this.matrix = [\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1\n    ];\n}\n\n",
    "felix.20240930232607.1": "multiply(m: M3x3): M3x3 {\n    const output = new M3x3();\n    output.matrix = [\n        this.matrix[M3x3.M00] * m.matrix[M3x3.M00] + this.matrix[M3x3.M10] * m.matrix[M3x3.M01] + this.matrix[M3x3.M20] * m.matrix[M3x3.M02],\n        this.matrix[M3x3.M01] * m.matrix[M3x3.M00] + this.matrix[M3x3.M11] * m.matrix[M3x3.M01] + this.matrix[M3x3.M21] * m.matrix[M3x3.M02],\n        this.matrix[M3x3.M02] * m.matrix[M3x3.M00] + this.matrix[M3x3.M12] * m.matrix[M3x3.M01] + this.matrix[M3x3.M22] * m.matrix[M3x3.M02],\n\n        this.matrix[M3x3.M00] * m.matrix[M3x3.M10] + this.matrix[M3x3.M10] * m.matrix[M3x3.M11] + this.matrix[M3x3.M20] * m.matrix[M3x3.M12],\n        this.matrix[M3x3.M01] * m.matrix[M3x3.M10] + this.matrix[M3x3.M11] * m.matrix[M3x3.M11] + this.matrix[M3x3.M21] * m.matrix[M3x3.M12],\n        this.matrix[M3x3.M02] * m.matrix[M3x3.M10] + this.matrix[M3x3.M12] * m.matrix[M3x3.M11] + this.matrix[M3x3.M22] * m.matrix[M3x3.M12],\n\n        this.matrix[M3x3.M00] * m.matrix[M3x3.M20] + this.matrix[M3x3.M10] * m.matrix[M3x3.M21] + this.matrix[M3x3.M20] * m.matrix[M3x3.M22],\n        this.matrix[M3x3.M01] * m.matrix[M3x3.M20] + this.matrix[M3x3.M11] * m.matrix[M3x3.M21] + this.matrix[M3x3.M21] * m.matrix[M3x3.M22],\n        this.matrix[M3x3.M02] * m.matrix[M3x3.M20] + this.matrix[M3x3.M12] * m.matrix[M3x3.M21] + this.matrix[M3x3.M22] * m.matrix[M3x3.M22]\n    ];\n    return output;\n}\n\n",
    "felix.20240930232735.1": "translation(x: number, y: number): M3x3 {\n    const output = new M3x3();\n    output.matrix = [\n        this.matrix[M3x3.M00],\n        this.matrix[M3x3.M01],\n        this.matrix[M3x3.M02],\n        this.matrix[M3x3.M10],\n        this.matrix[M3x3.M11],\n        this.matrix[M3x3.M12],\n\n        x * this.matrix[M3x3.M00] + y * this.matrix[M3x3.M10] + this.matrix[M3x3.M20],\n        x * this.matrix[M3x3.M01] + y * this.matrix[M3x3.M11] + this.matrix[M3x3.M21],\n        x * this.matrix[M3x3.M02] + y * this.matrix[M3x3.M12] + this.matrix[M3x3.M22]\n    ];\n    return output;\n}\n\n",
    "felix.20240930232836.1": "scale(x: number, y: number): M3x3 {\n    const output = new M3x3();\n    output.matrix = [\n        this.matrix[M3x3.M00] * x,\n        this.matrix[M3x3.M01] * x,\n        this.matrix[M3x3.M02] * x,\n\n        this.matrix[M3x3.M10] * y,\n        this.matrix[M3x3.M11] * y,\n        this.matrix[M3x3.M12] * y,\n\n        this.matrix[M3x3.M20],\n        this.matrix[M3x3.M21],\n        this.matrix[M3x3.M22]\n    ];\n    return output;\n}\n\n",
    "felix.20240930232910.1": "getFloatArray(): Float32Array {\n    return new Float32Array(this.matrix);\n}\n\n",
    "felix.20240930165848.1": "import { Game } from './main';\n\nexport { };\n\ndeclare global {\n  interface Window {\n    game: Game;\n  }\n}\n",
    "felix.20241008232538.1": "<< imports >>\n@others",
    "felix.20241008233501.1": "import { Point } from \"./maths\";\n",
    "felix.20240930165631.1": "@others\n",
    "felix.20240721001316.1": "<< imports >>\n@others\n",
    "felix.20240930170311.1": "import * as Constants from \"./constants\";\nimport { Point, M3x3 } from \"./maths\";\nimport { RenderableLayers, TEntity, TParameters } from \"./type\";\n\n",
    "felix.20240930143411.1": "document.addEventListener('DOMContentLoaded', (event) => {\n    if (!window.game) {\n        window.game = new Game();\n        window.game.resize(\n            window.innerWidth,\n            window.innerHeight,\n            true // First resize not debounced.\n        );\n    } else {\n        console.log('Game instance already started');\n    }\n});\n\nwindow.addEventListener('resize', (event) => {\n    if (window.game) {\n        window.game.resize(\n            window.innerWidth,\n            window.innerHeight\n        );\n    }\n});\n\nfunction loop(timestamp: number): void {\n    window.game.update(timestamp);\n    requestAnimationFrame(loop);\n}\n\n",
    "felix.20240930231528.1": "@others\n"
  }
}